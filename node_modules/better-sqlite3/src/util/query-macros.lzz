#define STATEMENT_THROW()                                                      \
	db->GetState()->busy = false;                                              \
	db->ThrowDatabaseError();                                                  \
	if (!bound) { sqlite3_clear_bindings(handle); }                            \
	return

#define STATEMENT_RETURN(return_value)                                         \
	db->GetState()->busy = false;                                              \
	info.GetReturnValue().Set(return_value);                                   \
	if (!bound) { sqlite3_clear_bindings(handle); }                            \
	return

#define STATEMENT_BIND(handle)                                                 \
	Binder binder(handle);                                                     \
	if (!binder.Bind(info, info.Length(), stmt)) {                             \
		sqlite3_clear_bindings(handle); return;                                \
	} ((void)0)

#define STATEMENT_START(RETURNS_DATA_CHECK)                                    \
	Statement* stmt = Unwrap<Statement>(info.This());                          \
	RETURNS_DATA_CHECK();                                                      \
	sqlite3_stmt* handle = stmt->handle;                                       \
	Database* db = stmt->db;                                                   \
	REQUIRE_DATABASE_OPEN(db->GetState());                                     \
	REQUIRE_DATABASE_NOT_BUSY(db->GetState());                                 \
	const bool bound = stmt->bound;                                            \
	if (!bound) {                                                              \
		STATEMENT_BIND(handle);                                                \
	} else if (info.Length() > 0)                                              \
		return ThrowTypeError("This statement already has bound parameters");  \
	db->GetState()->busy = true


#define REQUIRE_STATEMENT_RETURNS_DATA()                                       \
	if (!stmt->returns_data)                                                   \
		return ThrowTypeError("This statement does not return data. Use run() instead")
#define REQUIRE_STATEMENT_DOESNT_RETURN_DATA()                                 \
	if (stmt->returns_data)                                                    \
		return ThrowTypeError("This statement returns data. Use get(), all(), or iterate() instead")


#define _FUNCTION_START(type)                                                  \
	type* self = static_cast<type*>(sqlite3_user_data(invocation));            \
	v8::Isolate* isolate = self->isolate;                                      \
	NewHandleScope

#define FUNCTION_START()                                                       \
	_FUNCTION_START(CustomFunction)

#define AGGREGATE_START()                                                      \
	_FUNCTION_START(CustomAggregate);                                          \
	Accumulator* acc = self->GetAccumulator(invocation);                       \
	if (acc->value.IsEmpty()) return
